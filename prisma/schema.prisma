// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  githubUsername String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  analyzedRepos AnalyzedRepo[]
  repositories  Repository[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AnalyzedRepo {
  id              String   @id @default(cuid())
  userId          String
  repoUrl         String
  owner           String
  repoName        String
  description     String?
  defaultBranch   String   @default("main")
  language        String?
  stars           Int      @default(0)
  forks           Int      @default(0)
  size            Int      @default(0)
  lastCommit      DateTime?
  analysisStatus  String   @default("pending") // pending, analyzing, completed, failed
  data            Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations for detailed analysis
  files           RepoFile[]
  dependencies    RepoDependency[]
  components      RepoComponent[]
  analytics       RepoAnalytics?
  documentation   RepoDocumentation?

  @@unique([userId, owner, repoName])
}

model RepoFile {
  id          String       @id @default(cuid())
  repoId      String
  path        String
  name        String
  type        String       // file, directory
  extension   String?
  size        Int?
  language    String?
  content     String?      @db.Text
  linesOfCode Int?
  complexity  Int?
  createdAt   DateTime     @default(now())
  repo        AnalyzedRepo @relation(fields: [repoId], references: [id], onDelete: Cascade)
  repository  Repository?  @relation(fields: [repositoryId], references: [id])
  repositoryId String?
  
  // Relationships with other files
  imports     FileImport[] @relation("ImportingFile")
  importedBy  FileImport[] @relation("ImportedFile")
  
  @@unique([repoId, path])
}

model FileImport {
  id              String   @id @default(cuid())
  importingFileId String
  importedFileId  String
  importPath      String
  importType      String   // default, named, namespace, dynamic
  createdAt       DateTime @default(now())
  
  importingFile   RepoFile @relation("ImportingFile", fields: [importingFileId], references: [id], onDelete: Cascade)
  importedFile    RepoFile @relation("ImportedFile", fields: [importedFileId], references: [id], onDelete: Cascade)
  
  @@unique([importingFileId, importedFileId, importPath])
}

model RepoDependency {
  id          String       @id @default(cuid())
  repoId      String
  name        String
  version     String
  type        String       // production, development, peer
  description String?
  homepage    String?
  license     String?
  createdAt   DateTime     @default(now())
  repo        AnalyzedRepo @relation(fields: [repoId], references: [id], onDelete: Cascade)
  
  @@unique([repoId, name, type])
}

model RepoComponent {
  id          String       @id @default(cuid())
  repoId      String
  name        String
  type        String       // component, function, class, hook, util
  path        String
  startLine   Int?
  endLine     Int?
  props       Json?        // For React components
  exports     Json?        // What this component exports
  description String?
  complexity  Int?
  createdAt   DateTime     @default(now())
  repo        AnalyzedRepo @relation(fields: [repoId], references: [id], onDelete: Cascade)
  
  @@unique([repoId, path, name])
}

model RepoAnalytics {
  id                    String       @id @default(cuid())
  repoId                String       @unique
  totalFiles            Int          @default(0)
  totalLinesOfCode      Int          @default(0)
  languageDistribution  Json         // {"typescript": 60, "javascript": 30, "css": 10}
  complexityScore       Float        @default(0)
  maintainabilityIndex  Float        @default(0)
  technicalDebtRatio    Float        @default(0)
  testCoverage          Float?
  duplicatedLines       Int          @default(0)
  codeSmells            Int          @default(0)
  securityHotspots      Int          @default(0)
  bugs                  Int          @default(0)
  vulnerabilities       Int          @default(0)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  repo                  AnalyzedRepo @relation(fields: [repoId], references: [id], onDelete: Cascade)
}

model RepoDocumentation {
  id            String       @id @default(cuid())
  repoId        String       @unique
  readme        String?      @db.Text
  apiDocs       Json?        // Generated API documentation
  changelog     String?      @db.Text
  contributing  String?      @db.Text
  license       String?      @db.Text
  architecture  Json?        // Architecture diagrams and explanations
  tutorials     Json?        // Generated tutorials and guides
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  repo          AnalyzedRepo @relation(fields: [repoId], references: [id], onDelete: Cascade)
}

model Repository {
  id           String   @id @default(cuid())
  owner        String
  repoName     String
  description  String?
  language     String?
  stars        Int      @default(0)
  forks        Int      @default(0)
  analysisStatus String @default("pending") // pending, completed, failed
  lastAnalyzed DateTime @default(now())
  enhancedData Json?    // Store the complete enhanced analysis data
  
  // Relations
  files        RepoFile[]
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  
  @@unique([owner, repoName])
  @@map("repositories")
}